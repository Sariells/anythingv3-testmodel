import discord
from discord.ext import commands
import os
import re
from config import TOKEN
from io import BytesIO
import aiohttp
import asyncio
import shutil
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# URL API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
API_URL = "http://127.0.0.1:8000/generate"
# URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
STATUS_API_URL = "http://127.0.0.1:8000/status"
# URL API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
REF_API_URL = "http://127.0.0.1:8000/generate_by_reference"

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
DATASET_PATH = r"E:\spammer\Myproject\models\cache"

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ bot —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord
MAX_MESSAGE_SIZE_MB = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MB (Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–æ 8 MB)
MAX_FILES_PER_MESSAGE = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ Discord

def sanitize_filename(text):
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    - –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –∏ —Ç–∏—Ä–µ.
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.
    - –û–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    clean = re.sub(r'[^\w\s-]', '', text).strip().replace(' ', '_')
    return clean[:50] if clean else "image"

def get_unique_filename(base_name, extension=".png"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è—è —Å—á–µ—Ç—á–∏–∫.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è.
    """
    n = 1
    while True:
        name = f"{base_name}_{n:02d}"
        full_path = os.path.join(DATASET_PATH, f"{name}{extension}")
        if not os.path.exists(full_path):
            return name
        n += 1

async def check_generation_status(task_id, ctx):
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=150)) as session:
        try:
            async with session.get(f"{STATUS_API_URL}/{task_id}") as res:
                if res.status != 200:
                    await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏. –°—Ç–∞—Ç—É—Å: {res.status}")
                    return None
                data = await res.json()
                return data.get("status", "unknown")
        except Exception as e:
            await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            return None


async def generate_image_from_api(prompt, num_images, ctx):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    """
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=150)) as session:
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ API: {API_URL}, —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: prompt={prompt}, num_images={num_images}")
            async with session.post(API_URL, json={"prompt": prompt, "num_images": num_images}) as res:
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {res.status}")

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                response_text = await res.text()
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response_text}")

                if res.status != 200:
                    await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –°—Ç–∞—Ç—É—Å: {res.status}. –û—Ç–≤–µ—Ç: {response_text}")
                    return None

                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON
                    data = await res.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API: {data}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã
                    filenames = data.get("filenames", [])
                    if filenames:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã: {filenames}")
                        return filenames
                    else:
                        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –æ—Ç API.")
                        return None

                except Exception as e:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö)
                    await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {e}. –û—Ç–≤–µ—Ç: {response_text}")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {e}. –û—Ç–≤–µ—Ç: {response_text}")
                    return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å API: {str(e)}")
            return None

async def get_generated_files(task_id, ctx):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    await ctx.send("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")

    while True:
        status = await check_generation_status(task_id, ctx)
        if status == "completed":
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è task_id: {task_id}")
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=150)) as session:
                try:
                    async with session.get(f"{STATUS_API_URL}/files/{task_id}") as res:
                        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è task_id: {task_id}, —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {res.status}")
                        if res.status != 200:
                            await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –°—Ç–∞—Ç—É—Å: {res.status}")
                            return None
                        data = await res.json()
                        filenames = data.get("filenames", [])
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {filenames}")
                        return filenames
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
                    await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")
                    return None
        elif status == "failed":
            await ctx.send("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return None
        else:
            await asyncio.sleep(5)

@bot.command()
async def generate(ctx, *, prompt: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    - –†–∞–∑–±–∏—Ä–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    parts = prompt.split()
    try:
        num_images = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        prompt = ' '.join(parts[:-1])  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —ç—Ç–æ —Å–∞–º –ø—Ä–æ–º–ø—Ç
    except ValueError:
        num_images = 1  # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {ctx.author}: {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{prompt}'")

    await ctx.send(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    filenames = await generate_image_from_api(prompt, num_images, ctx)

    if not filenames:
        return

    saved_files = []
    for filename in filenames:
        safe_name = sanitize_filename(filename)
        unique_name = get_unique_filename(safe_name)

        if "_x2" in filename:
            unique_name += "_x2"

        final_image_path = os.path.join(DATASET_PATH, f"{unique_name}.png")
        final_prompt_path = os.path.join(DATASET_PATH, f"{unique_name}.txt")

        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} –≤ {final_image_path}")

        if os.path.exists(filename):
            shutil.move(filename, final_image_path)
            with open(final_prompt_path, "w", encoding="utf-8") as f:
                f.write(prompt)
            saved_files.append(final_image_path)
        else:
            await ctx.send(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–ª–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

    chunks = []
    current_chunk = []
    current_chunk_size = 0
    current_file_count = 0

    for file in saved_files:
        current_chunk.append(file)
        current_chunk_size += os.path.getsize(file) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        current_file_count += 1
        if current_chunk_size >= MAX_MESSAGE_SIZE_MB or current_file_count > MAX_FILES_PER_MESSAGE:
            chunks.append(current_chunk)
            current_chunk = []
            current_chunk_size = 0
            current_file_count = 0

    if current_chunk:
        chunks.append(current_chunk)

    for chunk in chunks:
        files = [discord.File(file_path) for file_path in chunk]
        await ctx.send("–í–æ—Ç –≤–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", files=files)

@bot.command()
async def refgen(ctx, prompt: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
    if not ctx.message.attachments:
        await ctx.send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    attachment = ctx.message.attachments[0]
    
    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_bytes = await attachment.read()

    await ctx.send(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É —Å –∑–∞–ø—Ä–æ—Å–æ–º: {prompt}.")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=150)) as session:
            data = aiohttp.FormData()
            data.add_field('image', image_bytes, filename='image.png', content_type='image/png')

            async with session.post(REF_API_URL, data=data, params={"prompt": prompt}) as res:
                if res.status != 200:
                    await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –°—Ç–∞—Ç—É—Å: {res.status}")
                    return

                data = await res.json()
                filename = data.get("filename", None)

                if not filename:
                    await ctx.send("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")
                    return

                await ctx.send(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")
                await ctx.send(file=discord.File(filename))

    except Exception as e:
        await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

bot.run(TOKEN)
