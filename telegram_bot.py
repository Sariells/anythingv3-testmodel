import os
import aiohttp
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import uuid
from config import TOKEN2

API_URL = "http://127.0.0.1:8000/generate"
REF_API_URL = "http://127.0.0.1:8000/generate_by_reference"
DATASET_PATH = r"E:\spammer\MyProject\datasets"  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç–æ–≤

if not os.path.exists(DATASET_PATH):
    os.makedirs(DATASET_PATH)

# ===  –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ txt (txt2img) ===
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = ' '.join(context.args)
    
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ /generate")
        return

    await update.message.reply_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É: {prompt}")
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API
        async with aiohttp.ClientSession() as session:
            async with session.post(API_URL, json={"prompt": prompt}) as res:
                if res.status != 200:
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    return
                
                data = await res.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if "filename" not in data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        file_path = data["filename"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        unique_id = uuid.uuid4().hex
        base_filename = f"{prompt.replace(' ', '_')[:30]}_{unique_id}"
        
        image_path = os.path.join(DATASET_PATH, f"{base_filename}.png")
        prompt_path = os.path.join(DATASET_PATH, f"{base_filename}.txt")
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        os.rename(file_path, image_path)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with open(prompt_path, "w", encoding="utf-8") as f:
            f.write(prompt)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(image_path, "rb") as file:
            await update.message.reply_photo(photo=InputFile(file))

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç
        await update.message.reply_text(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∞—Ç–∞—Å–µ—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º {base_filename}.")

    except aiohttp.ClientError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# ===  –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É (img2img) ===
async def refgen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–º–ø—Ç–∞
    if not update.message.photo or not context.args:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /refgen.")
        return

    prompt = ' '.join(context.args)
    await update.message.reply_text(f"üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É: `{prompt}`")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞–∏–≤—ã—Å—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        photo_file = await update.message.photo[-1].get_file()
        img_bytes = await photo_file.download_as_bytearray()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
        async with aiohttp.ClientSession() as session:
            files = {'image': ('reference.png', img_bytes, 'image/png')}
            params = {'prompt': prompt}
            async with session.post(REF_API_URL, params=params, files=files) as response:
                if response.status != 200:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    return

                data = await response.json()
                filename = data.get("filename")

                if not filename or not os.path.exists(filename):
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞—Ç–∞—Å–µ—Ç
                unique_id = uuid.uuid4().hex
                base_filename = f"{prompt.replace(' ', '_')[:30]}_{unique_id}"
                image_path = os.path.join(DATASET_PATH, f"{base_filename}.png")
                prompt_path = os.path.join(DATASET_PATH, f"{base_filename}.txt")

                os.rename(filename, image_path)

                with open(prompt_path, "w", encoding="utf-8") as f:
                    f.write(prompt)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(image_path, "rb") as f:
                    await update.message.reply_photo(photo=InputFile(f))

                await update.message.reply_text(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ `{base_filename}`")

    except Exception as e:
        await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN2).build()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("generate", generate))
app.add_handler(CommandHandler("refgen", refgen))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run_polling()
